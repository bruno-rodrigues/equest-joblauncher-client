<?php
/**
 * Job
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Job Class Doc Comment
 *
 * @category    Class
 * @description See Job/Draft parameter description at https://support.equest.com/index.php?pg&#x3D;kb.page&amp;id&#x3D;224
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Job implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'Job';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'requisition_number' => 'string',
        'position' => '\Swagger\Client\Model\Position',
        'company' => '\Swagger\Client\Model\Company',
        'candidate_response' => '\Swagger\Client\Model\CandidateResponse',
        '_links' => 'object'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'requisition_number' => 'requisition_number',
        'position' => 'position',
        'company' => 'company',
        'candidate_response' => 'candidate_response',
        '_links' => '_links'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'requisition_number' => 'setRequisitionNumber',
        'position' => 'setPosition',
        'company' => 'setCompany',
        'candidate_response' => 'setCandidateResponse',
        '_links' => 'setLinks'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'requisition_number' => 'getRequisitionNumber',
        'position' => 'getPosition',
        'company' => 'getCompany',
        'candidate_response' => 'getCandidateResponse',
        '_links' => 'getLinks'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $id 
      * @var int
      */
    protected $id;
    /**
      * $requisition_number 
      * @var string
      */
    protected $requisition_number;
    /**
      * $position 
      * @var \Swagger\Client\Model\Position
      */
    protected $position;
    /**
      * $company 
      * @var \Swagger\Client\Model\Company
      */
    protected $company;
    /**
      * $candidate_response 
      * @var \Swagger\Client\Model\CandidateResponse
      */
    protected $candidate_response;
    /**
      * $_links Dictionary of related links
      * @var object
      */
    protected $_links;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->requisition_number = $data["requisition_number"];
            $this->position = $data["position"];
            $this->company = $data["company"];
            $this->candidate_response = $data["candidate_response"];
            $this->_links = $data["_links"];
        }
    }
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    /**
     * Gets requisition_number
     * @return string
     */
    public function getRequisitionNumber()
    {
        return $this->requisition_number;
    }
  
    /**
     * Sets requisition_number
     * @param string $requisition_number 
     * @return $this
     */
    public function setRequisitionNumber($requisition_number)
    {
        
        $this->requisition_number = $requisition_number;
        return $this;
    }
    /**
     * Gets position
     * @return \Swagger\Client\Model\Position
     */
    public function getPosition()
    {
        return $this->position;
    }
  
    /**
     * Sets position
     * @param \Swagger\Client\Model\Position $position 
     * @return $this
     */
    public function setPosition($position)
    {
        
        $this->position = $position;
        return $this;
    }
    /**
     * Gets company
     * @return \Swagger\Client\Model\Company
     */
    public function getCompany()
    {
        return $this->company;
    }
  
    /**
     * Sets company
     * @param \Swagger\Client\Model\Company $company 
     * @return $this
     */
    public function setCompany($company)
    {
        
        $this->company = $company;
        return $this;
    }
    /**
     * Gets candidate_response
     * @return \Swagger\Client\Model\CandidateResponse
     */
    public function getCandidateResponse()
    {
        return $this->candidate_response;
    }
  
    /**
     * Sets candidate_response
     * @param \Swagger\Client\Model\CandidateResponse $candidate_response 
     * @return $this
     */
    public function setCandidateResponse($candidate_response)
    {
        
        $this->candidate_response = $candidate_response;
        return $this;
    }
    /**
     * Gets _links
     * @return object
     */
    public function getLinks()
    {
        return $this->_links;
    }
  
    /**
     * Sets _links
     * @param object $_links Dictionary of related links
     * @return $this
     */
    public function setLinks($_links)
    {
        
        $this->_links = $_links;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
